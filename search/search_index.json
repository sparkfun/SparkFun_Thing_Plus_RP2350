{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>This is just a placeholder file for the webpage re-direct. All the content for this section is actually in the <code>introduction.md</code> file.</p>"},{"location":"arduino_setup/","title":"Arduino","text":"<p>Attention</p> <p>If this is your first time using Arduino, please read through our tutorial on installing the Arduino IDE. If you have not installed an Arduino library before, we recommend you check out our installation guide.</p>"},{"location":"arduino_setup/#arduino-pico-boards","title":"Arduino-Pico Boards","text":"<p>The SparkFun Thing Plus - RP2350 is supported on the Arduino IDE in the Arduino-Pico boards package. To install the package, open the Preferences menu by navigating to File &gt; Preferences. Look at the bottom of the Preferences menu for \"Additional boards manager URLS\" and then copy this JSON link into that field:</p> <p><code>     https://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json </code></p> <p>Click \"OK\" to close this menu then navigate to the Boards Manager tool and search for \"pico\" and download the latest release of \"Raspberry Pi Pico\" (4.2.1 or later).</p> <p></p> <p>For more information on using the Arduino-Pico boards package, check out their documentation page.</p>"},{"location":"circuitpython_setup/","title":"CircuitPython","text":""},{"location":"circuitpython_setup/#setup","title":"Setup","text":"<p>The Thing Plus - RP2350 is included in the latest release of CircuitPython. If you've never used CircuitPython before, take a read through their tutorial here or click the button below:</p> <p> Welcome to CircuitPython </p>"},{"location":"circuitpython_setup/#thing-plus-rp2350-firmware","title":"Thing Plus - RP2350 Firmware","text":"<p>Download the latest firmware for the Thing Plus - RP2350 from the CircuitPython downloads page and search for \"Thing Plus RP2350\". </p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":""},{"location":"hardware_assembly/#qwiic-assembly","title":"Qwiic Assembly","text":"<p>Basic assembly of the Thing Plus - RP2350 just requires plugging the board in over USB-C to upload firmware and/or start programming with it. SparkFun offers a variety of Qwiic breakout boards with Python libraries like the AS6212 Temperature Sensor Breakout connected to the board in the photo below:</p> <p></p>"},{"location":"hardware_assembly/#soldered-assembly","title":"Soldered Assembly","text":"New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide. <p>      How to Solder: Through-Hole Soldering </p></p> <p>Users looking to start prototyping with the Thing Plus plugged into a breadboard should solder a pair of male or stackable headers.</p> <p></p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":"<p>Let's take a closer look at the RP2350 and other hardware components on this Thing Plus board.</p>"},{"location":"hardware_overview/#rp2350-microcontroller","title":"RP2350 Microcontroller","text":"<p>The RP2350 from Raspberry Pi packs a whole lot of computing punch in a tiny package. The RP2350 is a unique dual-core microcontroller that has four internal processors (two Arm Cortex-M33 and two Hazard3 RISC-V processors @150 MHz), though you can only select any two of these four to run at the same time. </p> <p></p> <p>This internal configuration allows users to customize the chip to use a pair their preferred architecture (ARM or Hazard3) or to use one of each! The RP2350 includes 520kB of on-chip SRAM in ten independent banks, 8kB of one-time-programmable (OTP) storage and this board also includes PSRAM connected to the chip's QSPI bus. The RP2350 also has a bevy of security features including optional boot signing with protected OTP storage for the boot decryption key, global bus filtering (based on either Arm or RISC-V security and privilege levels) and more.</p> <p>The Thing Plus - RP2350 uses the \"A\" version of the microcontroller which has 30 5V-tolerant GPIO with 4 analog inputs and also includes the following peripheral options:</p> <ul> <li>2x UART</li> <li>2x SPI</li> <li>2x I<sup>2</sup>C</li> <li>24 PWM</li> <li>USB 1.1 Controller</li> <li>12 PIO State Machines</li> <li>1x High-Speed Transmit (HSTX) Peripheral for DVI/DSI support</li> </ul> <p>For complete information on the RP2350, refer to the datasheet.</p>"},{"location":"hardware_overview/#memory","title":"Memory","text":""},{"location":"hardware_overview/#w25q128-flash","title":"W25Q128 Flash","text":"<p>The W25Q128 Flash IC adds 16MB of storage space on the Thing Plus. This connects to the RP2350 over QSPI.</p> <p></p>"},{"location":"hardware_overview/#psram","title":"PSRAM","text":"<p>The board also includes an 8MB PSRAM IC for dynamic storage. This also connects to the RP2350 over QSPI. PSRAM support is included in the SparkFun MicroPython \"early release\" firmware found later in this guide and on the product page, but is not natively supported in the Pico SDK as of release. Refer to the Arducam Demo section of this guide for information on how to enable and set up PSRAM using the Pico SDK.</p> <p>For a complete overview of the PSRAM IC, refer to the datasheet.</p>"},{"location":"hardware_overview/#sd-card-slot","title":"\u00b5SD Card Slot","text":"<p>The board has a \u00b5SD card slot that connects to the RP2350's SPI bus for even more storage. Make sure the SPI are LOW when the \u00b5SD card is unpowered. Setting these pins HIGH can damage the GPIO pins. The connector is a fricton-fit connector so no \"clicking\" and \"unclicking\" is necessary. Just plug it in nice and snug. </p> <p></p>"},{"location":"hardware_overview/#raspberry-pi-rm2-radio-module","title":"Raspberry Pi RM2 Radio Module","text":"<p>The Raspberry Pi RM2 (radio module 2) is built around the same chipset as the previous Raspberry Pi radio module found on boards like the Pico W. The module features both WiFi 4 (802.11n) 2.4GHz and  Bluetooth<sup>\u2122</sup> 5.2 with support for Low Energy (Central and Peripheral) and Classic. </p> <p></p> <p>The RM2 communicates with the RP2350 over SPI and we've designed this board to use the same pins for the radio module as official Raspberry Pi boards (Pico W and Pico 2 W), making it easy to use the radio module without having to adjust anything from those development boards. The Thing Plus routes the module's GPIO0 pin to a blue STAT LED to allow users to create a visual indicator of the status of the module. We added this STAT LED connected to the same pin used on the Pico W to make code for that compatible with the Thing Plus - RP2350.</p>"},{"location":"hardware_overview/#power-components","title":"Power Components","text":"<p>The Thing Plus - RP2350 includes several options for powering including USB-C, LiPo battery with on-board battery charging and monitoring circuits as well as direct power inputs.</p> <p></p>"},{"location":"hardware_overview/#usb-c-connector","title":"USB-C Connector","text":"<p>The USB-C connector on the board acts as the primary serial interface for the RP2350 as well as a power input. The 5V USB input voltage is regulated down to 3.3V through a voltage regulator with a max current of 500mA@3.3V.</p>"},{"location":"hardware_overview/#2-pin-jst-connector-battery-charger-fuel-gauge","title":"2-Pin JST Connector, Battery Charger, &amp; Fuel Gauge","text":"<p>WARNING: LiPo Battery Connector Polarity (v10 Only)</p> <p>The LiPo battery connector on v10 (DD-27675) of the Thing Plus - RP2350 is reversed from SparkFun's normal 2-pin JST battery connection. If you are using this board with a battery, follow the silkscreen markings on the board for correct polarity. This means v10 is incompatible with all single-cell LiPo batteries SparkFun carries.</p> <p>The updated version, v11 (WRL-25134), fixes this issue. </p> Want some LiPo battery care tips? <p>Check out our Single Cell LiPo Battery Care tutorial for some helpful tips on handling and caring for them. <p>      Single Cell LiPo Battery Care </p></p> <p>The board has a 2-pin JST connector to connect a single-cell Lithium Ion (LiPo) battery for battery-powered applications. It also has an MCP73831 battery charger to charge an attached battery and a MAX17048 fuel gauge to monitor battery voltage levels. The charge rate is set to 214mA@3.3V. The MCP73831 receives power from the V_USB line so it only is powered when 5V is provided either over USB or the V_USB PTH pin. If applying voltage directly to the V_USB pin make sure it does not exceed 5.5V.</p> <p>The MAX17048's I<sup>2</sup>C lines are pulled up to 3.3V_P to allow for customizable power options. Read on below for more information about peripheral power.</p>"},{"location":"hardware_overview/#peripheral-power-control","title":"Peripheral Power Control","text":"<p>The board includes a second RT9080 3.3V regulator to control power to the peripheral 3.3V (3.3V_P) rail. This is powered on by default with some options for user control to help conserve power. The RT9080's EN (Enable) pin is tied to GPIO13 so users can drive it LOW in their code to disable this line. It also is tied to the main 3.3V rail through the LP solder jumper so it defaults to powered on. If this solder jumper is opened, it defaults to off when the RP2350 is power-cycled though users can drive the GPIO13 pin HIGH in their code to enable the 3.3V_P rail.</p>"},{"location":"hardware_overview/#pinout-qwiic-connector","title":"Pinout &amp; Qwiic Connector","text":"<p>Thing Plus boards break out a large number of GPIO and interface pins to a pair of 0.1\"-spaced plated through-hole (PTH) headers and also has a Qwiic connector for easy integration into SparkFun's Qwiic ecosystem.</p>"},{"location":"hardware_overview/#qwiic-connector","title":"Qwiic Connector","text":"<p>The Qwiic connector is tied to GPIO6 (SDA) and GPIO7 (SCL) pins on the RP2350. The Qwiic connector provides connections for SDA, SCL, 3.3V, and Ground. Note, the Qwiic connector power and I<sup>2</sup>C pins are tied to 3.3V_P and are powered by default but if the peripheral power control circuit is adjusted as covered above, it will not function properly without enabling 3.3V_P through code.</p> <p></p>"},{"location":"hardware_overview/#pth-headers","title":"PTH Headers","text":"<p>The Thing Plus's pair of PTH headers break out a selection of 21 GPIO pins from the RP2350 along with PTH connections to USB voltage (5V), regulated 3.3V, battery voltage, RP2350 reset signal, and the voltage regulator Enable pin. The board also has a \"central\" row of three 0.1\"-spaced headers connected to the RP2350's internal Serial Wire Debug multi-drop bus. </p> <p></p> <p>The pinout includes connections to UART, I<sup>2</sup>C, SPI, 13 GPIO (3 of analog-capable pins) and the WS2812's DATA OUT pin.</p>"},{"location":"hardware_overview/#buttons","title":"Buttons","text":"<p>There are two buttons on the board labeled RESET and BOOT. The RESET button is tied to the RP2350's RUN pin and resets the IC when pressed. The BOOT button puts the RP2350 into bootloader mode when held down during power on or reset. Read on to the UF2 Bootloader section of this guide for more information on using the bootloader.</p> <p></p>"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>The Thing Plus - RP2350 includes three labeled LEDs; PWR, CHG and STAT as well as a WS2812 RGB LED. </p> <p></p> <p>The red PWR LED indicates when the 3.3V rail is powered. The yellow CHG LED indicates when the charge circuit is powered with 5V from either the USB-C connector or the V_USB PTH pin. The blue STAT LED is tied to the RM2 radio module GPIO0 to be used for indicating when the module is transmiting/receiving data. The WS2812 RGB LED's DATA IN pin is tied to the RP2350 GPIO14 pin. The RGB LED's DATA OUT pin is routed to the FREEBIE PTH (labeled LED on the board) if users want to daisy-chain more LEDs to the board.</p>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction! <p>      How to Work with Jumper Pads and PCB Traces </p></p> <p>This Thing Plus has four solder jumpers labeled PWR, I2C, LP, and SHLD. </p> <p></p> <p>The PWR jumper completes the Power LED circuit and is CLOSED by default. Open the solder jumper by severing the trace in between the two pads to disable the Power LED if needed. </p> <p>The I2C jumper pulls the I<sup>2</sup>C lines (SDA/SCL) to 3.3V through a pair of 2.2k\u03a9 resistors. This three-way jumper is CLOSED by default. Open the solder jumper to disable the pullup resistors on the I<sup>2</sup>C bus if needed.</p> <p>The LP jumper controls whether the peripheral power regulator is always on or toggleable with an I/O pin (RP2350 GPIO13). This jumper is CLOSED by default so all peripherals (Qwiic connector, \u00b5SD slot and RGB LED) are always powered on. Opening this jumper requires setting GPIO13 HIGH to enable peripheral power.</p> <p>The SHLD jumper connects the USB-C connector's shield pin to the board's ground plane. This jumper is CLOSED by default. Open it to isolate the shield pin from the board.</p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>This board matches the Thing Plus footprint and measures 2.3\" x 0.9\" (58.42mm x 22.86mm) and includes four mounting holes that fit a 4-40 screw. Note, the RM2 antenna comes very close to the \"top\" two mounting holes so take care when securing anything to these holes to avoid damaging the radio's antenna. </p> <p></p> Need more measurements? <p>For more information about the board's dimensions, users can download the Eagle files for the board. These files can be opened in Eagle and additional measurements can be made with the dimensions tool.</p>  Eagle - Free Download! <p>Eagle is a CAD program for electronics that is free to use for hobbyists and students. However, it does require an account registration to utilize the software.</p> <p> Download fromAutodesk primary logo </p>  Dimensions Tool <p>This video from Autodesk demonstrates how to utilize the dimensions tool in Eagle, to include additional measurements:</p> <p> </p>"},{"location":"introduction/","title":"Hookup Guide","text":""},{"location":"introduction/#introduction","title":"Introduction","text":"<ul> <li> <p> SparkFun Thing Plus - RP2350 SKU: WRL-25134 <p> <p> </p> <li> <p>The SparkFun Thing Plus - RP2350 is a dynamic and powerful wireless development platform in the Thing Plus form factor. Built around the RP2350 microcontroller from the Raspberry Pi Foundation, this board includes their radio module for single-band 2.4 GHz WiFi 4 (802.11n) and Bluetooth<sup>\u00ae</sup> 5.2 along with common hardware components found on all Thing Plus Boards. This includes on-board Lithium Ion (LiPo) battery charging and fuel gauge circuits, \u00b5SD card socket, Qwiic connector, and the Thing Plus pinout allowing use of the Thing Plus - RP2350 in a wide variety of both local and remote applications.   The Raspberry Pi Radio Module (RM2) operates over an SPI interface, and we've designed this board to use the same pins for the radio module as official Raspberry Pi boards, making it easy to use the radio module without having to adjust anything from those development boards. The RP2350 Thing Plus includes two expanded memory options: 16MB of external Flash and 8MB PSRAM connected to the RP2350's QSPI controller. This Thing Plus board works with C/C++ using the Pico SDK, MicroPython, CircuitPython, and Arduino development environments.</p> <p> Purchase from SparkFun  </p> </li>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this guide you will need at least one USB-C cable to connect the Thing Plus to your computer: </p> <ul> <li> <p> <p> </p> <p> USB 3.1 Cable A to C - 3 Foot CAB-14743 </p> <li> <p> <p> </p> <p> Reversible USB A to C Cable - 2m CAB-15424 </p> <p>You may also want to get a Qwiic cable or kit to connect the Thing Plus - RP2350 to other Qwiic devices:</p> <ul> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 50mm PRT-17260 </p> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 500mm PRT-17257 </p> <li> <p> <p> </p> <p>Flexible Qwiic Cable - Female Jumper (4-pin) CAB-17261 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Cable Kit PRT-15081 </p>"},{"location":"introduction/#optional-materials","title":"Optional Materials","text":"<p>The Thing Plus - RP2350 includes a 2-pin JST connector and integrated charging circuit for an attached single-cell LiPo battery. Below are a few options we recommend for battery-powered applications:</p> <p>WARNING: LiPo Battery Connector Polarity (v10 Only)</p> <p>The LiPo battery connector on v10 (DD-27675), of the Thing Plus - RP2350 is reversed from SparkFun's normal 2-pin JST battery connection. If you are using this board with a battery, follow the silkscreen markings on the board for correct polarity. This means v10 is incompatible with all single-cell LiPo batteries SparkFun carries.</p> <p>The updated version, v11 (WRL-25134), fixes this issue. </p> <ul> <li> <p> <p> </p> <p> Lithium Ion Battery - 1250mAh (IEC62133 Certified) PRT-18286 </p> <li> <p> <p> </p> <p> Lithium Ion Battery - 2Ah PRT-13855 </p> <li> <p> <p> </p> <p> Lithium Ion Battery - 400mAh PRT-13851 </p> <li> <p> <p> </p> <p> Lithium Ion Battery - 850mAh PRT-13854 </p> <p>If you prefer a soldered connection or want to modify the solder jumpers on this board, you may need some of the products listed below:</p> <ul> <li> <p> <p> </p> <p> SparkFun Qwiic Shield for Thing Plus DEV-16790 </p> <li> <p> <p> </p> <p> PINECIL - Smart Mini Portable Soldering Iron TOL-23913 </p> <li> <p> <p> </p> <p> Hobby Knife TOL-09200 </p> <li> <p> <p> </p> <p>Chip Quik No-Clean Flux Pen - 10mL CAB-14579 </p>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>We designed this board for integration into SparkFun's Qwiic connect system.  Click on the banner below to learn more about the SparkFun Qwiic Connect System.</p> Qwiic Connect System <p>Before getting started with this Hookup Guide, you may want to read through the tutorials below if you are not familiar with the concepts covered in them or want a refresher. If you are using either of the Qwiic Shields linked above, we recommend reading through their respective Hookup Guides before continuing with this tutorial:</p> <ul> <li> <p> Serial Communication </p> </li> <li> <p> I2C </p> </li> <li> <p> Logic Levels </p> </li> <li> <p> Serial Terminal Basics </p> </li> <li> <p> SparkFun Qwiic Shield for Thing Plus Hookup Guide </p> </li> <li> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul>"},{"location":"micropython_examples/","title":"MicroPython Examples","text":""},{"location":"micropython_examples/#verify-micropython-firmware-hardware","title":"Verify MicroPython Firmware &amp; Hardware","text":"<p>First, to make sure everything is running properly, use the <code>sys</code> module to verify the firmware version and machine/board running. Open your preferred interface and enter the following prompts and you should see something similar to the printout below:</p> <pre><code>import sys\nsys.implementation\n(name='micropython', version=(1, 24, 0, 'preview'), _machine='SparkFun Thing Plus RP2350 with RP2350', _mpy=7942)\n</code></pre>"},{"location":"micropython_examples/#verify-memory-internal-and-psram","title":"Verify Memory (Internal and PSRAM)","text":"<p>Next, we can verify the total free memory on the Thing Plus which includes the built-in memory on the RP2350 as well as the 8MB PSRAM. We'll use the <code>gc</code> module for this so type in the prompt below and you should see a response close to the value below:</p> <pre><code>import gc\ngc.mem_free()\n8640352\n</code></pre>"},{"location":"micropython_examples/#ws2812-led-control","title":"WS2812 LED Control","text":"<p>Now let's make sure we can properly control the WS2812 LED on the Thing Plus using the <code>machine</code> and <code>neopixel</code> classes. The WS2812 Data In pin connects to I/O 14 but we've defined this pin as \"NEOPIXEL\" which takes care of assigning the pin and defining it as an output. Next, we'll set the color to red and finally write the color values to the LED. The code below goes through all these steps so try copying it on your machine and you should see the WS2812 LED turn red.</p> <pre><code>import machine, neopixel\npin = machine.Pin(\"NEOPIXEL\")\nled = neopixel.NeoPixel(pin, 1)\nled[0] = (255, 0, 0)\nled.write()\n</code></pre> <p>Try playing around with other values between 0 and 255 for the three colors (R, G, B) and then writing the changes to switch the LED's displayed color.</p>"},{"location":"micropython_examples/#network-test","title":"Network Test","text":"<p>Finally, let's run an example to test connecting the Thing Plus - RP2350 to a WiFi network, then access an API and print out the data returned. This example polls a database maintained here that lists the number and names of astronauts currently on the ISS and then prints them out. The code also includes some helpful RGB status colors to indicate when the board is connecting to WiFi (RED), downloading data (BLUE), and on success (GREEN).</p> <ul> <li> <p> LED set to RED while connecting to WiFi. </p> </li> <li> <p> LED set to BLUE while downloading. </p> </li> <li> <p> LED set to GREEN indicating download success. </p> </li> </ul> <p>Before running the example, adjust the template values in the example called <code>WIFI_NETWORK</code> and <code>WIFI_PASSWORD</code> with your WiFi network ID and password.</p> <pre><code>import network\nimport urequests\nimport time\nimport neopixel\nimport machine\n\n# Set up the NeoPixel LED\npin = machine.Pin(\"NEOPIXEL\")\nled = neopixel.NeoPixel(pin, 1)\n\n# Set the LED to red while connecting to WiFi\nled[0] = (255, 0, 0)\nled.write()\n\n# Connect to a WiFi network\nwlan = network.WLAN(network.STA_IF)\nwlan.active(True)\nwlan.connect('WIFI_NETWORK', 'WIFI_PASSWORD')\n\n# Wait for the connection to complete\nprint(\"Waiting for connection...\")\nwhile not wlan.isconnected():\n    time.sleep(1)\n    print('.', sep='', end='', )\nprint('Connected!')\n\n# Set the LED to blue while downloading data\nled[0] = (0, 0, 255)\nled.write()\n\n# Download the list of astronauts currently in space\nprint('Downloading list of astronauts currently in space...')\nastronauts = urequests.get(\"https://corquaid.github.io/international-space-station-APIs/JSON/people-in-space.json\").json()\n\n# Print the number of astronauts and their names\nnumber = astronauts['number']\nprint('There are', number, 'astronauts in space.')\nfor i in range(number):\n    print(i+1, astronauts['people'][i]['name'])\n\n# Set the LED to green to indicate success\nled[0] = (0, 255, 0)\nled.write()\n</code></pre>"},{"location":"micropython_setup/","title":"MicroPython","text":""},{"location":"micropython_setup/#setup","title":"Setup","text":"<p>MicroPython is an application of the Python 3 language that runs on microcontrollers like the Thing Plus - RP2350 that allows you to easily interact with the board directly over a USB serial interface through either a command line interface or your preferred Python IDE such as Thonny. We'll do a quick overview of how to download MicroPython firmware on to the Thing Plus - RP2350 but for a complete overview of using MicroPython with this and other RP2350 boards, head over to Raspberry Pi's documentation by clicking the button below:</p> <p> Raspberry Pi MicroPython Docs </p>"},{"location":"micropython_setup/#uf2-firmware","title":"UF2 Firmware","text":"<p>As of this writing, we're waiting on the next release of MicroPython to include UF2 files for the Thing Plus - RP2350 so to get users started before then, we have Beta releases of MicroPython firmware available here or by clicking the button below:</p> <p> SparkFun MicroPython Beta Releases </p> <p>Simply download the latest release and then put the Thing Plus - RP2350 into UF2 bootloader mode and open the location the board appeared as a USB storage device (it should appear as \"RP2350\"). Next, simply drag and drop the UF2 file into the RP2350 folder and the board should reboot. After the board reboots, open up your preferred MicroPython IDE (or command line interface) and you can start interacting with your Thing Plus. Read on to the MicroPython examples section for a few quick examples to make sure everything is working properly.</p>"},{"location":"picoSDK_setup/","title":"Pico SDK","text":""},{"location":"picoSDK_setup/#raspberry-pi-pico-sdk","title":"Raspberry Pi Pico SDK","text":"<p>The Pico C SDK is a C/C++ development kit for Raspberry Pi microcontrollers including the RP2350. Click on the links below for complete documentation on installing and using the SDK.</p> <p> Pico C SDK Documentation </p> <p> Pico C SDK GitHub Repository </p>"},{"location":"picoSDK_setup/#thing-plus-rp2350-board-definition","title":"Thing Plus - RP2350 Board Definition","text":"<p>When using the Pico SDK, make sure to use v2.1 or later and select <code>sparkfun_thingplus_rp2350</code> for the board. We recommend using Microsoft VS Code with the Pico SDK Extension.</p>"},{"location":"resources/","title":"Resources","text":"<p>For more resources related to the , check out the links listed here:  <ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>SparkFun Pico SDK Library</li> <li>Arduino Pico Arduino Core</li> <li>MicroPython Firmware (Beta 04)</li> <li>MicroPython Documentation</li> <li>CircuitPython Downloads</li> <li>RP2350 Product Brief</li> <li>Raspberry Pi RP2350 Microcontroller Documentation</li> <li>Qwiic Info Page</li> <li>Datasheet (RP2350)</li> <li>Datasheet (APS6404L PSRAM)</li> <li>Hardware GitHub Respository</li> </ul>"},{"location":"single_page/","title":"Introduction","text":""},{"location":"single_page/#hookup-guide","title":"Hookup Guide","text":""},{"location":"single_page/#introduction_1","title":"Introduction","text":"<ul> <li> <p> SparkFun Thing Plus - RP2350 SKU: WRL-25134 <p> <p> </p> <li> <p>The SparkFun Thing Plus - RP2350 is a dynamic and powerful wireless development platform in the Thing Plus form factor. Built around the RP2350 microcontroller from the Raspberry Pi Foundation, this board includes their radio module for single-band 2.4 GHz WiFi 4 (802.11n) and Bluetooth<sup>\u00ae</sup> 5.2 along with common hardware components found on all Thing Plus Boards. This includes on-board Lithium Ion (LiPo) battery charging and fuel gauge circuits, \u00b5SD card socket, Qwiic connector, and the Thing Plus pinout allowing use of the Thing Plus - RP2350 in a wide variety of both local and remote applications.   The Raspberry Pi Radio Module (RM2) operates over an SPI interface, and we've designed this board to use the same pins for the radio module as official Raspberry Pi boards, making it easy to use the radio module without having to adjust anything from those development boards. The RP2350 Thing Plus includes two expanded memory options: 16MB of external Flash and 8MB PSRAM connected to the RP2350's QSPI controller. This Thing Plus board works with C/C++ using the Pico SDK, MicroPython, CircuitPython, and Arduino development environments.</p> <p> Purchase from SparkFun  </p> </li>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this guide you will need at least one USB-C cable to connect the Thing Plus to your computer: </p> <ul> <li> <p> <p> </p> <p> USB 3.1 Cable A to C - 3 Foot CAB-14743 </p> <li> <p> <p> </p> <p> Reversible USB A to C Cable - 2m CAB-15424 </p> <p>You may also want to get a Qwiic cable or kit to connect the Thing Plus - RP2350 to other Qwiic devices:</p> <ul> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 50mm PRT-17260 </p> <li> <p> <p> </p> <p> Flexible Qwiic Cable - 500mm PRT-17257 </p> <li> <p> <p> </p> <p>Flexible Qwiic Cable - Female Jumper (4-pin) CAB-17261 </p> <li> <p> <p> </p> <p> SparkFun Qwiic Cable Kit PRT-15081 </p>"},{"location":"single_page/#optional-materials","title":"Optional Materials","text":"<p>The Thing Plus - RP2350 includes a 2-pin JST connector and integrated charging circuit for an attached single-cell LiPo battery. Below are a few options we recommend for battery-powered applications:</p> <p>WARNING: LiPo Battery Connector Polarity (v10 Only)</p> <p>The LiPo battery connector on v10 (DD-27675), of the Thing Plus - RP2350 is reversed from SparkFun's normal 2-pin JST battery connection. If you are using this board with a battery, follow the silkscreen markings on the board for correct polarity. This means v10 is incompatible with all single-cell LiPo batteries SparkFun carries.</p> <p>The updated version, v11 (WRL-25134), fixes this issue. </p> <ul> <li> <p> <p> </p> <p> Lithium Ion Battery - 1250mAh (IEC62133 Certified) PRT-18286 </p> <li> <p> <p> </p> <p> Lithium Ion Battery - 2Ah PRT-13855 </p> <li> <p> <p> </p> <p> Lithium Ion Battery - 400mAh PRT-13851 </p> <li> <p> <p> </p> <p> Lithium Ion Battery - 850mAh PRT-13854 </p> <p>If you prefer a soldered connection or want to modify the solder jumpers on this board, you may need some of the products listed below:</p> <ul> <li> <p> <p> </p> <p> SparkFun Qwiic Shield for Thing Plus DEV-16790 </p> <li> <p> <p> </p> <p> PINECIL - Smart Mini Portable Soldering Iron TOL-23913 </p> <li> <p> <p> </p> <p> Hobby Knife TOL-09200 </p> <li> <p> <p> </p> <p>Chip Quik No-Clean Flux Pen - 10mL CAB-14579 </p>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>We designed this board for integration into SparkFun's Qwiic connect system.  Click on the banner below to learn more about the SparkFun Qwiic Connect System.</p> Qwiic Connect System <p>Before getting started with this Hookup Guide, you may want to read through the tutorials below if you are not familiar with the concepts covered in them or want a refresher. If you are using either of the Qwiic Shields linked above, we recommend reading through their respective Hookup Guides before continuing with this tutorial:</p> <ul> <li> <p> Serial Communication </p> </li> <li> <p> I2C </p> </li> <li> <p> Logic Levels </p> </li> <li> <p> Serial Terminal Basics </p> </li> <li> <p> SparkFun Qwiic Shield for Thing Plus Hookup Guide </p> </li> <li> <p> How to Work with Jumper Pads and PCB Traces </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":"<p>Let's take a closer look at the RP2350 and other hardware components on this Thing Plus board.</p>"},{"location":"single_page/#rp2350-microcontroller","title":"RP2350 Microcontroller","text":"<p>The RP2350 from Raspberry Pi packs a whole lot of computing punch in a tiny package. The RP2350 is a unique dual-core microcontroller that has four internal processors (two Arm Cortex-M33 and two Hazard3 RISC-V processors @150 MHz), though you can only select any two of these four to run at the same time. </p> <p></p> <p>This internal configuration allows users to customize the chip to use a pair their preferred architecture (ARM or Hazard3) or to use one of each! The RP2350 includes 520kB of on-chip SRAM in ten independent banks, 8kB of one-time-programmable (OTP) storage and this board also includes PSRAM connected to the chip's QSPI bus. The RP2350 also has a bevy of security features including optional boot signing with protected OTP storage for the boot decryption key, global bus filtering (based on either Arm or RISC-V security and privilege levels) and more.</p> <p>The Thing Plus - RP2350 uses the \"A\" version of the microcontroller which has 30 5V-tolerant GPIO with 4 analog inputs and also includes the following peripheral options:</p> <ul> <li>2x UART</li> <li>2x SPI</li> <li>2x I<sup>2</sup>C</li> <li>24 PWM</li> <li>USB 1.1 Controller</li> <li>12 PIO State Machines</li> <li>1x High-Speed Transmit (HSTX) Peripheral for DVI/DSI support</li> </ul> <p>For complete information on the RP2350, refer to the datasheet.</p>"},{"location":"single_page/#memory","title":"Memory","text":""},{"location":"single_page/#w25q128-flash","title":"W25Q128 Flash","text":"<p>The W25Q128 Flash IC adds 16MB of storage space on the Thing Plus. This connects to the RP2350 over QSPI.</p> <p></p>"},{"location":"single_page/#psram","title":"PSRAM","text":"<p>The board also includes an 8MB PSRAM IC for dynamic storage. This also connects to the RP2350 over QSPI. PSRAM support is included in the SparkFun MicroPython \"early release\" firmware found later in this guide and on the product page, but is not natively supported in the Pico SDK as of release. Refer to the Arducam Demo section of this guide for information on how to enable and set up PSRAM using the Pico SDK.</p> <p>For a complete overview of the PSRAM IC, refer to the datasheet.</p>"},{"location":"single_page/#sd-card-slot","title":"\u00b5SD Card Slot","text":"<p>The board has a \u00b5SD card slot that connects to the RP2350's SPI bus for even more storage. Make sure the SPI are LOW when the \u00b5SD card is unpowered. Setting these pins HIGH can damage the GPIO pins. The connector is a fricton-fit connector so no \"clicking\" and \"unclicking\" is necessary. Just plug it in nice and snug. </p> <p></p>"},{"location":"single_page/#raspberry-pi-rm2-radio-module","title":"Raspberry Pi RM2 Radio Module","text":"<p>The Raspberry Pi RM2 (radio module 2) is built around the same chipset as the previous Raspberry Pi radio module found on boards like the Pico W. The module features both WiFi 4 (802.11n) 2.4GHz and  Bluetooth<sup>\u2122</sup> 5.2 with support for Low Energy (Central and Peripheral) and Classic. </p> <p></p> <p>The RM2 communicates with the RP2350 over SPI and we've designed this board to use the same pins for the radio module as official Raspberry Pi boards (Pico W and Pico 2 W), making it easy to use the radio module without having to adjust anything from those development boards. The Thing Plus routes the module's GPIO0 pin to a blue STAT LED to allow users to create a visual indicator of the status of the module. We added this STAT LED connected to the same pin used on the Pico W to make code for that compatible with the Thing Plus - RP2350.</p>"},{"location":"single_page/#power-components","title":"Power Components","text":"<p>The Thing Plus - RP2350 includes several options for powering including USB-C, LiPo battery with on-board battery charging and monitoring circuits as well as direct power inputs.</p> <p></p>"},{"location":"single_page/#usb-c-connector","title":"USB-C Connector","text":"<p>The USB-C connector on the board acts as the primary serial interface for the RP2350 as well as a power input. The 5V USB input voltage is regulated down to 3.3V through a voltage regulator with a max current of 500mA@3.3V.</p>"},{"location":"single_page/#2-pin-jst-connector-battery-charger-fuel-gauge","title":"2-Pin JST Connector, Battery Charger, &amp; Fuel Gauge","text":"<p>WARNING: LiPo Battery Connector Polarity (v10 Only)</p> <p>The LiPo battery connector on v10 (DD-27675) of the Thing Plus - RP2350 is reversed from SparkFun's normal 2-pin JST battery connection. If you are using this board with a battery, follow the silkscreen markings on the board for correct polarity. This means v10 is incompatible with all single-cell LiPo batteries SparkFun carries.</p> <p>The updated version, v11 (WRL-25134), fixes this issue. </p> Want some LiPo battery care tips? <p>Check out our Single Cell LiPo Battery Care tutorial for some helpful tips on handling and caring for them. <p>      Single Cell LiPo Battery Care </p></p> <p>The board has a 2-pin JST connector to connect a single-cell Lithium Ion (LiPo) battery for battery-powered applications. It also has an MCP73831 battery charger to charge an attached battery and a MAX17048 fuel gauge to monitor battery voltage levels. The charge rate is set to 214mA@3.3V. The MCP73831 receives power from the V_USB line so it only is powered when 5V is provided either over USB or the V_USB PTH pin. If applying voltage directly to the V_USB pin make sure it does not exceed 5.5V.</p> <p>The MAX17048's I<sup>2</sup>C lines are pulled up to 3.3V_P to allow for customizable power options. Read on below for more information about peripheral power.</p>"},{"location":"single_page/#peripheral-power-control","title":"Peripheral Power Control","text":"<p>The board includes a second RT9080 3.3V regulator to control power to the peripheral 3.3V (3.3V_P) rail. This is powered on by default with some options for user control to help conserve power. The RT9080's EN (Enable) pin is tied to GPIO13 so users can drive it LOW in their code to disable this line. It also is tied to the main 3.3V rail through the LP solder jumper so it defaults to powered on. If this solder jumper is opened, it defaults to off when the RP2350 is power-cycled though users can drive the GPIO13 pin HIGH in their code to enable the 3.3V_P rail.</p>"},{"location":"single_page/#pinout-qwiic-connector","title":"Pinout &amp; Qwiic Connector","text":"<p>Thing Plus boards break out a large number of GPIO and interface pins to a pair of 0.1\"-spaced plated through-hole (PTH) headers and also has a Qwiic connector for easy integration into SparkFun's Qwiic ecosystem.</p>"},{"location":"single_page/#qwiic-connector","title":"Qwiic Connector","text":"<p>The Qwiic connector is tied to GPIO6 (SDA) and GPIO7 (SCL) pins on the RP2350. The Qwiic connector provides connections for SDA, SCL, 3.3V, and Ground. Note, the Qwiic connector power and I<sup>2</sup>C pins are tied to 3.3V_P and are powered by default but if the peripheral power control circuit is adjusted as covered above, it will not function properly without enabling 3.3V_P through code.</p> <p></p>"},{"location":"single_page/#pth-headers","title":"PTH Headers","text":"<p>The Thing Plus's pair of PTH headers break out a selection of 21 GPIO pins from the RP2350 along with PTH connections to USB voltage (5V), regulated 3.3V, battery voltage, RP2350 reset signal, and the voltage regulator Enable pin. The board also has a \"central\" row of three 0.1\"-spaced headers connected to the RP2350's internal Serial Wire Debug multi-drop bus. </p> <p></p> <p>The pinout includes connections to UART, I<sup>2</sup>C, SPI, 13 GPIO (3 of analog-capable pins) and the WS2812's DATA OUT pin.</p>"},{"location":"single_page/#buttons","title":"Buttons","text":"<p>There are two buttons on the board labeled RESET and BOOT. The RESET button is tied to the RP2350's RUN pin and resets the IC when pressed. The BOOT button puts the RP2350 into bootloader mode when held down during power on or reset. Read on to the UF2 Bootloader section of this guide for more information on using the bootloader.</p> <p></p>"},{"location":"single_page/#leds","title":"LEDs","text":"<p>The Thing Plus - RP2350 includes three labeled LEDs; PWR, CHG and STAT as well as a WS2812 RGB LED. </p> <p></p> <p>The red PWR LED indicates when the 3.3V rail is powered. The yellow CHG LED indicates when the charge circuit is powered with 5V from either the USB-C connector or the V_USB PTH pin. The blue STAT LED is tied to the RM2 radio module GPIO0 to be used for indicating when the module is transmiting/receiving data. The WS2812 RGB LED's DATA IN pin is tied to the RP2350 GPIO14 pin. The RGB LED's DATA OUT pin is routed to the FREEBIE PTH (labeled LED on the board) if users want to daisy-chain more LEDs to the board.</p>"},{"location":"single_page/#jumpers","title":"Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction! <p>      How to Work with Jumper Pads and PCB Traces </p></p> <p>This Thing Plus has four solder jumpers labeled PWR, I2C, LP, and SHLD. </p> <p></p> <p>The PWR jumper completes the Power LED circuit and is CLOSED by default. Open the solder jumper by severing the trace in between the two pads to disable the Power LED if needed. </p> <p>The I2C jumper pulls the I<sup>2</sup>C lines (SDA/SCL) to 3.3V through a pair of 2.2k\u03a9 resistors. This three-way jumper is CLOSED by default. Open the solder jumper to disable the pullup resistors on the I<sup>2</sup>C bus if needed.</p> <p>The LP jumper controls whether the peripheral power regulator is always on or toggleable with an I/O pin (RP2350 GPIO13). This jumper is CLOSED by default so all peripherals (Qwiic connector, \u00b5SD slot and RGB LED) are always powered on. Opening this jumper requires setting GPIO13 HIGH to enable peripheral power.</p> <p>The SHLD jumper connects the USB-C connector's shield pin to the board's ground plane. This jumper is CLOSED by default. Open it to isolate the shield pin from the board.</p>"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>This board matches the Thing Plus footprint and measures 2.3\" x 0.9\" (58.42mm x 22.86mm) and includes four mounting holes that fit a 4-40 screw. Note, the RM2 antenna comes very close to the \"top\" two mounting holes so take care when securing anything to these holes to avoid damaging the radio's antenna. </p> <p></p> Need more measurements? <p>For more information about the board's dimensions, users can download the Eagle files for the board. These files can be opened in Eagle and additional measurements can be made with the dimensions tool.</p>  Eagle - Free Download! <p>Eagle is a CAD program for electronics that is free to use for hobbyists and students. However, it does require an account registration to utilize the software.</p> <p> Download fromAutodesk primary logo </p>  Dimensions Tool <p>This video from Autodesk demonstrates how to utilize the dimensions tool in Eagle, to include additional measurements:</p> <p> </p>"},{"location":"single_page/#hardware-assembly","title":"Hardware Assembly","text":""},{"location":"single_page/#qwiic-assembly","title":"Qwiic Assembly","text":"<p>Basic assembly of the Thing Plus - RP2350 just requires plugging the board in over USB-C to upload firmware and/or start programming with it. SparkFun offers a variety of Qwiic breakout boards with Python libraries like the AS6212 Temperature Sensor Breakout connected to the board in the photo below:</p> <p></p>"},{"location":"single_page/#soldered-assembly","title":"Soldered Assembly","text":"New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide. <p>      How to Solder: Through-Hole Soldering </p></p> <p>Users looking to start prototyping with the Thing Plus plugged into a breadboard should solder a pair of male or stackable headers.</p> <p></p>"},{"location":"single_page/#uf2-bootloader","title":"UF2 Bootloader","text":"<p>The Thing Plus - RP2350 uses a UF2 bootloader for easy flashing/uploading of code to the board. The UF2 bootloader causes the board to show up on your computer as a USB storage device and does not require any drivers for Windows, Mac OSX, and Linux! This bootloader is used for uploading in both the Pico SDK and MicroPython development environments so let's take a brief look at how to enter bootload mode.</p>"},{"location":"single_page/#what-is-uf2","title":"What is UF2?","text":"<p>UF2 stands for USB Flashing Format, which was developed by Microsoft for PXT (now known as MakeCode) for flashing microcontrollers over the Mass Storage Class (MSC), just like a removable flash drive. The file format is unique, so unfortunately, you cannot simply drag and drop a compiled binary or hex file onto the board. Instead, the format of the file has extra information to tell the processor where the data goes, in addition to the data itself. For more information about UF2, you can read more from the MakeCode blog, as well as the UF2 file format specification.</p>"},{"location":"single_page/#entering-the-bootloader","title":"Entering the Bootloader","text":"<p>Putting the Thing Plus - RP2350 into bootloader mode only requires a couple of presses of the BOOT and RESET buttons. Start by pressing and holding the BOOT button down:</p> <p></p> <p>Next, press and release the RESET button while still holding down the BOOT button:</p> <p></p> <p>Finally, release the BOOT button and the board should be in bootloader mode and appear on your computer as a USB storage device called \"RP2350\".</p>"},{"location":"single_page/#pico-sdk-setup","title":"Pico SDK Setup","text":""},{"location":"single_page/#raspberry-pi-pico-sdk","title":"Raspberry Pi Pico SDK","text":"<p>The Pico C SDK is a C/C++ development kit for Raspberry Pi microcontrollers including the RP2350. Click on the links below for complete documentation on installing and using the SDK.</p> <p> Pico C SDK Documentation </p> <p> Pico C SDK GitHub Repository </p>"},{"location":"single_page/#thing-plus-rp2350-board-definition","title":"Thing Plus - RP2350 Board Definition","text":"<p>When using the Pico SDK, make sure to use v2.1 or later and select <code>sparkfun_thingplus_rp2350</code> for the board. We recommend using Microsoft VS Code with the Pico SDK Extension.</p>"},{"location":"single_page/#micropython-setup","title":"MicroPython Setup","text":""},{"location":"single_page/#setup","title":"Setup","text":"<p>MicroPython is an application of the Python 3 language that runs on microcontrollers like the Thing Plus - RP2350 that allows you to easily interact with the board directly over a USB serial interface through either a command line interface or your preferred Python IDE such as Thonny. We'll do a quick overview of how to download MicroPython firmware on to the Thing Plus - RP2350 but for a complete overview of using MicroPython with this and other RP2350 boards, head over to Raspberry Pi's documentation by clicking the button below:</p> <p> Raspberry Pi MicroPython Docs </p>"},{"location":"single_page/#uf2-firmware","title":"UF2 Firmware","text":"<p>As of this writing, we're waiting on the next release of MicroPython to include UF2 files for the Thing Plus - RP2350 so to get users started before then, we have Beta releases of MicroPython firmware available here or by clicking the button below:</p> <p> SparkFun MicroPython Beta Releases </p> <p>Simply download the latest release and then put the Thing Plus - RP2350 into UF2 bootloader mode and open the location the board appeared as a USB storage device (it should appear as \"RP2350\"). Next, simply drag and drop the UF2 file into the RP2350 folder and the board should reboot. After the board reboots, open up your preferred MicroPython IDE (or command line interface) and you can start interacting with your Thing Plus. Read on to the MicroPython examples section for a few quick examples to make sure everything is working properly.</p>"},{"location":"single_page/#circuitpython-setup","title":"CircuitPython Setup","text":""},{"location":"single_page/#setup_1","title":"Setup","text":"<p>The Thing Plus - RP2350 is included in the latest release of CircuitPython. If you've never used CircuitPython before, take a read through their tutorial here or click the button below:</p> <p> Welcome to CircuitPython </p>"},{"location":"single_page/#thing-plus-rp2350-firmware","title":"Thing Plus - RP2350 Firmware","text":"<p>Download the latest firmware for the Thing Plus - RP2350 from the CircuitPython downloads page and search for \"Thing Plus RP2350\". </p>"},{"location":"single_page/#arduino-setup","title":"Arduino Setup","text":"<p>Attention</p> <p>If this is your first time using Arduino, please read through our tutorial on installing the Arduino IDE. If you have not installed an Arduino library before, we recommend you check out our installation guide.</p>"},{"location":"single_page/#arduino-pico-boards","title":"Arduino-Pico Boards","text":"<p>The SparkFun Thing Plus - RP2350 is supported on the Arduino IDE in the Arduino-Pico boards package. To install the package, open the Preferences menu by navigating to File &gt; Preferences. Look at the bottom of the Preferences menu for \"Additional boards manager URLS\" and then copy this JSON link into that field:</p> <p><code>     https://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json </code></p> <p>Click \"OK\" to close this menu then navigate to the Boards Manager tool and search for \"pico\" and download the latest release of \"Raspberry Pi Pico\" (4.2.1 or later).</p> <p></p> <p>For more information on using the Arduino-Pico boards package, check out their documentation page.</p>"},{"location":"single_page/#micropython-examples","title":"MicroPython Examples","text":""},{"location":"single_page/#verify-micropython-firmware-hardware","title":"Verify MicroPython Firmware &amp; Hardware","text":"<p>First, to make sure everything is running properly, use the <code>sys</code> module to verify the firmware version and machine/board running. Open your preferred interface and enter the following prompts and you should see something similar to the printout below:</p> <pre><code>import sys\nsys.implementation\n(name='micropython', version=(1, 24, 0, 'preview'), _machine='SparkFun Thing Plus RP2350 with RP2350', _mpy=7942)\n</code></pre>"},{"location":"single_page/#verify-memory-internal-and-psram","title":"Verify Memory (Internal and PSRAM)","text":"<p>Next, we can verify the total free memory on the Thing Plus which includes the built-in memory on the RP2350 as well as the 8MB PSRAM. We'll use the <code>gc</code> module for this so type in the prompt below and you should see a response close to the value below:</p> <pre><code>import gc\ngc.mem_free()\n8640352\n</code></pre>"},{"location":"single_page/#ws2812-led-control","title":"WS2812 LED Control","text":"<p>Now let's make sure we can properly control the WS2812 LED on the Thing Plus using the <code>machine</code> and <code>neopixel</code> classes. The WS2812 Data In pin connects to I/O 14 but we've defined this pin as \"NEOPIXEL\" which takes care of assigning the pin and defining it as an output. Next, we'll set the color to red and finally write the color values to the LED. The code below goes through all these steps so try copying it on your machine and you should see the WS2812 LED turn red.</p> <pre><code>import machine, neopixel\npin = machine.Pin(\"NEOPIXEL\")\nled = neopixel.NeoPixel(pin, 1)\nled[0] = (255, 0, 0)\nled.write()\n</code></pre> <p>Try playing around with other values between 0 and 255 for the three colors (R, G, B) and then writing the changes to switch the LED's displayed color.</p>"},{"location":"single_page/#network-test","title":"Network Test","text":"<p>Finally, let's run an example to test connecting the Thing Plus - RP2350 to a WiFi network, then access an API and print out the data returned. This example polls a database maintained here that lists the number and names of astronauts currently on the ISS and then prints them out. The code also includes some helpful RGB status colors to indicate when the board is connecting to WiFi (RED), downloading data (BLUE), and on success (GREEN).</p> <ul> <li> <p> LED set to RED while connecting to WiFi. </p> </li> <li> <p> LED set to BLUE while downloading. </p> </li> <li> <p> LED set to GREEN indicating download success. </p> </li> </ul> <p>Before running the example, adjust the template values in the example called <code>WIFI_NETWORK</code> and <code>WIFI_PASSWORD</code> with your WiFi network ID and password.</p> <pre><code>import network\nimport urequests\nimport time\nimport neopixel\nimport machine\n\n# Set up the NeoPixel LED\npin = machine.Pin(\"NEOPIXEL\")\nled = neopixel.NeoPixel(pin, 1)\n\n# Set the LED to red while connecting to WiFi\nled[0] = (255, 0, 0)\nled.write()\n\n# Connect to a WiFi network\nwlan = network.WLAN(network.STA_IF)\nwlan.active(True)\nwlan.connect('WIFI_NETWORK', 'WIFI_PASSWORD')\n\n# Wait for the connection to complete\nprint(\"Waiting for connection...\")\nwhile not wlan.isconnected():\n    time.sleep(1)\n    print('.', sep='', end='', )\nprint('Connected!')\n\n# Set the LED to blue while downloading data\nled[0] = (0, 0, 255)\nled.write()\n\n# Download the list of astronauts currently in space\nprint('Downloading list of astronauts currently in space...')\nastronauts = urequests.get(\"https://corquaid.github.io/international-space-station-APIs/JSON/people-in-space.json\").json()\n\n# Print the number of astronauts and their names\nnumber = astronauts['number']\nprint('There are', number, 'astronauts in space.')\nfor i in range(number):\n    print(i+1, astronauts['people'][i]['name'])\n\n# Set the LED to green to indicate success\nled[0] = (0, 255, 0)\nled.write()\n</code></pre>"},{"location":"single_page/#arduino-examples","title":"Arduino Examples","text":""},{"location":"single_page/#vision-demo-assembly","title":"Vision Demo Assembly:","text":"<p>This Vision Demo lets you build an all-in-one image capture and display assembly run completely on the RP2350. We created this project to showcase the raw processing power and data transmission speeds of the RP2350 in a local environment. This project connects the waveshare OV5640 Camera Board along with a 2\" LCD (coming soon to SparkFun!) to the RP2350 over SPI and the RP2350's HSTX-capable pins. The example takes a live video feed from the OV5460 and displays it with nearly no image lag at about 40fps. While this demo is only a local image, with some code modifications you could theoretically take the images and stream them over WiFi or Bluetooth to create a true IoT camera.</p>"},{"location":"single_page/#hardware-assembly_1","title":"Hardware Assembly","text":""},{"location":"single_page/#soldering","title":"Soldering","text":"<p>Before wiring anything up, make sure to solder headers (or wires if you prefer) to both the Thing Plus and the LCD board.</p> <p></p>"},{"location":"single_page/#display-wiring","title":"Display Wiring","text":"<p>The display used in this example connects over SPI along with a few other connections for power (VCC &amp; GND), reset . The table below outlines the connections between the display and Thing Plus when read from Left to Right on the display.</p> Display Pin Thing Plus Pin Notes GND GND Any ground pin VCC 3V3 Power with 3.3V only SCL* 19 Clock signal SDA* 18 Data In. Called \"Din\" in example code. RES 3V3 Reset pin. Pulled HIGH to 3.3V DC* 17 SPI display data/command select pin. CS* 16 SPI Chip select. BLK NC Backlight pin. <p>The photos below show the wiring before and after seating the LCD on the breadboard:</p> <p></p> <p>If you're following this wiring to the letter, take note of the orange jumper wire netting the display's Reset pin to VCC/3.3V. Also note to align the Backlight pin with pin 30 on the breadboard and everything else will match up.</p> <p></p>"},{"location":"single_page/#camera-wiring","title":"Camera Wiring","text":"<p>The camera wiring gets a bit more compliated than the display is it requires power and data signals as well as image processing signals that must be connected to sequential pins. Due to the design of the Thing Plus, this wiring may seem a bit confusing when looking at the board but if you refer to the schematic you can match up GPIO pins 0 through 7 to their respective labels on the board. The table below outlines these pin connections along with the rest required to wire the camera breakout to the Thing Plus:</p> Camera Pin Thing Plus Pin Label Notes 3.3V 3V3 3.3V only GND GND Any Ground pin SIOC 21 Clock signal. Paired with data to any I<sup>2</sup>C pin pair SIOD 20 Data signal. Paired with data to any I<sup>2</sup>C pin pair VSYNC A1/27 Can be any GPIO pin HREF A2/28 Can be any GPIO pin PCLK A0/26 Can be any GPIO pin XCLK 11 Can be any GPIO pin D9 SCL/7 Must be sequential GPIO pins D8 SDA/6 Must be sequential GPIO pins D7 5 Must be sequential GPIO pins D6 POCI/4 Must be sequential GPIO pins D5 PICO/3 Must be sequential GPIO pins D4 SCK/4 Must be sequential GPIO pins D3 RX/3 Must be sequential GPIO pins D2 TX/2 Must be sequential GPIO pins RST - Not connected PWDN - Not connected <p>We made an ad-hoc wiring \"harness\" for the camera board by soldering wires to a couple of trimmed female headers so please excuse the wiring mess in the photos below show. The photos below show the wiring for the camera with and without the camera board connected to our harness. Users can try and recreate this or if you're making a more permanent installation you can solder wires directly between all three boards. Alternatively, you could use some jumper wires (perhaps either male/female or female/female).</p> <p></p> <p></p>"},{"location":"single_page/#threshold-pin","title":"Threshold Pin","text":"<p>The code also includes a thresholding pin set to GPIO22 on the Thing Plus. Connect this pin to ground using a jumper wire. The threshold pin is configured as an input with pull-up so it starts as disabled (22 connected to GND) and can be enabled by disconnecting the wire from ground. The images above and below show this connection using an Orange jumper wire.</p>"},{"location":"single_page/#completed-assembly","title":"Completed Assembly","text":"<p>Make sure everything is wired correctly and your completed assembly might look something like the photo below:</p> <p></p>"},{"location":"single_page/#vision-demo-code","title":"Vision Demo Code:","text":""},{"location":"single_page/#software-requirements","title":"Software Requirements","text":"<p>This example is written for Arduino and requires the IDE, the Thing Plus - RP2350 board definition included in the Arduino Pico boards package as well as the SparkFun iCap OV5640 and SparkFun HSTX ST7789 Arduino libraries. Make sure you've gone through the boards package installation instructions in the Arduino Setup section of this guide and then follow the instructions below to install the required libraries.</p>"},{"location":"single_page/#required-libraries","title":"Required Libraries","text":"<p>The example requires the SparkFun ImageCapture and RP2 HSTX ST7789 Arduino Libraries. You can install them through the Library Manager in the Arduino IDE by searching for \"SparkFun ImageCapture\" and \"SparkFun RP2 HSTX ST7789\" and install the latest version. Alternatively, you can download a ZIP of each library to manually install them by clicking the buttons below:</p> <p> SparkFun ImageCapture Arduino Library (ZIP) </p> <p> SparkFun RP2 HSTX ST7789 Arduino Library (ZIP) </p> <p>With the libraries installed, let's move on to uploading the code.</p>"},{"location":"single_page/#vision-demo-example-code","title":"Vision Demo Example Code","text":"<p>The example code for this demo can be found in the Thing Plus - RP2350 GitHub Repository in the \"Examples/Vision_Demo\" folder. You can find it from the link above or download a ZIP of the entire repository by clicking the button below:</p> <p> Thing Plus - RP2350 GitHub Repo (ZIP) </p> <p>Open up the example in Arduino or open a blank sketch and copy the code below:</p> Vision Demo <pre><code>#include \"SparkFun_iCap_OV5640.h\"\n#include \"SparkFun_RP2_HSTX_ST7789_Arduino_Library.h\"\n\n// Configuration for the display\nRP2_HSTX_ST7789_Config displayConfig = {\n    .pinDin  =   18, // Must support HSTX (GPIO 12-19 on RP2350)\n    .pinSck  =   19, // Must support HSTX (GPIO 12-19 on RP2350)\n    .pinCs   =   16, // Must support HSTX (GPIO 12-19 on RP2350)\n    .pinDc   =   17, // Must support HSTX (GPIO 12-19 on RP2350)\n    .pinRst  =   -1, // Any GPIO pin, or -1 if not connected\n    .pinBl   =   -1, // Any GPIO pin, or -1 if not connected\n    .width   =  320, // Display width\n    .height  =  240, // Display height\n    .rawMode = true, // Whether to use raw mode\n};\n\n// Set up arch and pins structures for Pico RP2040.\niCap_arch arch =\n{\n    .pio = pio0, // Can be pio0, pio1, or pio2 on the RP2350\n    .bswap = false // Whether to swap the camera data bytes\n};\n\n// Pins for the OV5640 camera\nOV5640_pins pins =\n{\n    .enable = -1, // Any GPIO pin, or -1 if not connected\n    .reset  = -1, // Any GPIO pin, or -1 if not connected\n    .xclk   = 11, // Any GPIO pin\n    .pclk   = 26, // Any GPIO pin\n    .vsync  = 27, // Any GPIO pin\n    .hsync  = 28, // Any GPIO pin\n    .data   = {0, 1, 2, 3, 4, 5, 6, 7}, // Any GPIO pins, must be sequential!\n    .sda    = 20, // Any I2C pin pair\n    .scl    = 21  // Any I2C pin pair\n};\n\n// Create an instance of the camera\nSparkFun_iCap_OV5640 cam(pins, &amp;arch, Wire1);\n\n// Create an instance of the display\nRP2_HSTX_ST7789 display;\n\n// Threshold pin\nint thresholdPin = 22;\n\nvoid setup() {\n    Serial.begin(115200);\n    Serial.println(\"Hello! Camera Test.\");\n\n    // Begin camera with QVGA resolution (320x240) and RGB565 color (16-bit)\n    iCap_status status = cam.begin(OV5640_SIZE_QVGA, ICAP_COLOR_RGB565);\n    while(status != ICAP_STATUS_OK)\n    {\n        Serial.println(\"Camera not found, please check wiring!\");\n        delay(1000);\n    }\n\n    // Initialize the display\n    display.begin(displayConfig);\n\n    // Set the threshold pin as an input with pull-up\n    pinMode(thresholdPin, INPUT_PULLUP);\n}\n\nvoid loop()\n{\n    // Record the current time\n    uint32_t t0 = micros();\n\n    // Get the camera buffer\n    uint16_t* buffer = cam.getBuffer();\n\n    // Check whether thresholding is requested\n    bool threshold = digitalRead(thresholdPin) != 0;\n\n    // Send the command to start a new frame\n    display.startNewFrameRaw();\n\n    // Loop through all pixels in the frame buffer\n    for (int y = 0; y &lt; displayConfig.width; ++y)\n    {\n        for (int x = 0; x &lt; displayConfig.height; ++x)\n        {\n            // Get the pixel value from the camera buffer\n            int rgb = buffer[x * displayConfig.width + y];\n\n            // Check whether thresholding is requested\n            if(threshold)\n            {\n                // Extract the red, green, and blue components (RGB565)\n                int r = (rgb &gt;&gt; 11) &amp; 0x1f;\n                int g = (rgb &gt;&gt; 5) &amp; 0x3f;\n                int b = rgb &amp; 0x1f;\n\n                // Calculate the sum of the components. Only use 5 bits of green\n                // to match red and blue\n                int sum = r + (g&gt;&gt;1) + b;\n\n                // With 5 bits per channel, the maximum sum is 96, so we'll use\n                // half of that as the threshold\n                if(sum &gt;= 48)\n                {\n                    // We're above the threshold, so set the pixel to white\n                    rgb = 0xffff;\n                }\n                else\n                {\n                    // We're below the threshold, so set the pixel to black\n                    rgb = 0x0000;\n                }\n            }\n\n            // Send this pixel to the display\n            display.putPixelRaw(rgb);\n        }\n    }\n\n    // Record the current time\n    uint32_t t1 = micros();\n\n    // Print FPS of the display\n    float fps = 1e6 / (t1 - t0);\n    Serial.printf(\"Display FPS: %.2f\\n\", fps);\n}\n</code></pre> <p>Select the board (SparkFun Thing Plus - RP2350) and port and click the \"Upload\" button. Once the code finishes uploading, you should see the screen turn on and start displaying a live feed from the camera. </p> <p></p> <p>If the screen remains black, press the Reset button on the Thing Plus and it should start up after that. If you do not see anything, open the Serial Monitor in Arduino with the baud set to 115200, reset the board again and check to see if the camera connection error message prints. If it does, double check the wiring to make sure everything is connected properly.</p>"},{"location":"single_page/#troubleshooting","title":"Troubleshooting","text":""},{"location":"single_page/#lipo-battery-connector-polarity-v10-only","title":"LiPo Battery Connector Polarity (v10 only)","text":"<p>The LiPo battery connector on v10 (DD-27675) of the Thing Plus - RP2350 is reversed from SparkFun's normal 2-pin JST battery connection. If you are using this board with a battery, follow the silkscreen markings on the board for correct polarity. This means v10 is incompatible with all single-cell LiPo batteries SparkFun carries.</p> <p>The updated version, v11 (WRL-25134), fixes this issue. </p>"},{"location":"single_page/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Info</p> <p><p> Not working as expected and need help? </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> SparkFun Technical Assistance Page <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.<p></p>"},{"location":"single_page/#resources","title":"Resources:","text":""},{"location":"single_page/#resources_1","title":"Resources","text":"<p>For more resources related to the , check out the links listed here:  <ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>SparkFun Pico SDK Library</li> <li>Arduino Pico Arduino Core</li> <li>MicroPython Firmware (Beta 04)</li> <li>MicroPython Documentation</li> <li>CircuitPython Downloads</li> <li>RP2350 Product Brief</li> <li>Raspberry Pi RP2350 Microcontroller Documentation</li> <li>Qwiic Info Page</li> <li>Datasheet (RP2350)</li> <li>Datasheet (APS6404L PSRAM)</li> <li>Hardware GitHub Respository</li> </ul>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#lipo-battery-connector-polarity-v10-only","title":"LiPo Battery Connector Polarity (v10 only)","text":"<p>The LiPo battery connector on v10 (DD-27675) of the Thing Plus - RP2350 is reversed from SparkFun's normal 2-pin JST battery connection. If you are using this board with a battery, follow the silkscreen markings on the board for correct polarity. This means v10 is incompatible with all single-cell LiPo batteries SparkFun carries.</p> <p>The updated version, v11 (WRL-25134), fixes this issue. </p>"},{"location":"troubleshooting/#general-troubleshooting-help","title":"General Troubleshooting Help","text":"<p>Info</p> <p><p> Not working as expected and need help? </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> SparkFun Technical Assistance Page <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.<p></p>"},{"location":"uf2/","title":"UF2 Bootloader","text":"<p>The Thing Plus - RP2350 uses a UF2 bootloader for easy flashing/uploading of code to the board. The UF2 bootloader causes the board to show up on your computer as a USB storage device and does not require any drivers for Windows, Mac OSX, and Linux! This bootloader is used for uploading in both the Pico SDK and MicroPython development environments so let's take a brief look at how to enter bootload mode.</p>"},{"location":"uf2/#what-is-uf2","title":"What is UF2?","text":"<p>UF2 stands for USB Flashing Format, which was developed by Microsoft for PXT (now known as MakeCode) for flashing microcontrollers over the Mass Storage Class (MSC), just like a removable flash drive. The file format is unique, so unfortunately, you cannot simply drag and drop a compiled binary or hex file onto the board. Instead, the format of the file has extra information to tell the processor where the data goes, in addition to the data itself. For more information about UF2, you can read more from the MakeCode blog, as well as the UF2 file format specification.</p>"},{"location":"uf2/#entering-the-bootloader","title":"Entering the Bootloader","text":"<p>Putting the Thing Plus - RP2350 into bootloader mode only requires a couple of presses of the BOOT and RESET buttons. Start by pressing and holding the BOOT button down:</p> <p></p> <p>Next, press and release the RESET button while still holding down the BOOT button:</p> <p></p> <p>Finally, release the BOOT button and the board should be in bootloader mode and appear on your computer as a USB storage device called \"RP2350\".</p>"},{"location":"vision_demo_assembly/","title":"Demo Assembly","text":"<p>This Vision Demo lets you build an all-in-one image capture and display assembly run completely on the RP2350. We created this project to showcase the raw processing power and data transmission speeds of the RP2350 in a local environment. This project connects the waveshare OV5640 Camera Board along with a 2\" LCD (coming soon to SparkFun!) to the RP2350 over SPI and the RP2350's HSTX-capable pins. The example takes a live video feed from the OV5460 and displays it with nearly no image lag at about 40fps. While this demo is only a local image, with some code modifications you could theoretically take the images and stream them over WiFi or Bluetooth to create a true IoT camera.</p>"},{"location":"vision_demo_assembly/#hardware-assembly","title":"Hardware Assembly","text":""},{"location":"vision_demo_assembly/#soldering","title":"Soldering","text":"<p>Before wiring anything up, make sure to solder headers (or wires if you prefer) to both the Thing Plus and the LCD board.</p> <p></p>"},{"location":"vision_demo_assembly/#display-wiring","title":"Display Wiring","text":"<p>The display used in this example connects over SPI along with a few other connections for power (VCC &amp; GND), reset . The table below outlines the connections between the display and Thing Plus when read from Left to Right on the display.</p> Display Pin Thing Plus Pin Notes GND GND Any ground pin VCC 3V3 Power with 3.3V only SCL* 19 Clock signal SDA* 18 Data In. Called \"Din\" in example code. RES 3V3 Reset pin. Pulled HIGH to 3.3V DC* 17 SPI display data/command select pin. CS* 16 SPI Chip select. BLK NC Backlight pin. <p>The photos below show the wiring before and after seating the LCD on the breadboard:</p> <p></p> <p>If you're following this wiring to the letter, take note of the orange jumper wire netting the display's Reset pin to VCC/3.3V. Also note to align the Backlight pin with pin 30 on the breadboard and everything else will match up.</p> <p></p>"},{"location":"vision_demo_assembly/#camera-wiring","title":"Camera Wiring","text":"<p>The camera wiring gets a bit more compliated than the display is it requires power and data signals as well as image processing signals that must be connected to sequential pins. Due to the design of the Thing Plus, this wiring may seem a bit confusing when looking at the board but if you refer to the schematic you can match up GPIO pins 0 through 7 to their respective labels on the board. The table below outlines these pin connections along with the rest required to wire the camera breakout to the Thing Plus:</p> Camera Pin Thing Plus Pin Label Notes 3.3V 3V3 3.3V only GND GND Any Ground pin SIOC 21 Clock signal. Paired with data to any I<sup>2</sup>C pin pair SIOD 20 Data signal. Paired with data to any I<sup>2</sup>C pin pair VSYNC A1/27 Can be any GPIO pin HREF A2/28 Can be any GPIO pin PCLK A0/26 Can be any GPIO pin XCLK 11 Can be any GPIO pin D9 SCL/7 Must be sequential GPIO pins D8 SDA/6 Must be sequential GPIO pins D7 5 Must be sequential GPIO pins D6 POCI/4 Must be sequential GPIO pins D5 PICO/3 Must be sequential GPIO pins D4 SCK/4 Must be sequential GPIO pins D3 RX/3 Must be sequential GPIO pins D2 TX/2 Must be sequential GPIO pins RST - Not connected PWDN - Not connected <p>We made an ad-hoc wiring \"harness\" for the camera board by soldering wires to a couple of trimmed female headers so please excuse the wiring mess in the photos below show. The photos below show the wiring for the camera with and without the camera board connected to our harness. Users can try and recreate this or if you're making a more permanent installation you can solder wires directly between all three boards. Alternatively, you could use some jumper wires (perhaps either male/female or female/female).</p> <p></p> <p></p>"},{"location":"vision_demo_assembly/#threshold-pin","title":"Threshold Pin","text":"<p>The code also includes a thresholding pin set to GPIO22 on the Thing Plus. Connect this pin to ground using a jumper wire. The threshold pin is configured as an input with pull-up so it starts as disabled (22 connected to GND) and can be enabled by disconnecting the wire from ground. The images above and below show this connection using an Orange jumper wire.</p>"},{"location":"vision_demo_assembly/#completed-assembly","title":"Completed Assembly","text":"<p>Make sure everything is wired correctly and your completed assembly might look something like the photo below:</p> <p></p>"},{"location":"vision_demo_code/","title":"Demo Code","text":""},{"location":"vision_demo_code/#software-requirements","title":"Software Requirements","text":"<p>This example is written for Arduino and requires the IDE, the Thing Plus - RP2350 board definition included in the Arduino Pico boards package as well as the SparkFun iCap OV5640 and SparkFun HSTX ST7789 Arduino libraries. Make sure you've gone through the boards package installation instructions in the Arduino Setup section of this guide and then follow the instructions below to install the required libraries.</p>"},{"location":"vision_demo_code/#required-libraries","title":"Required Libraries","text":"<p>The example requires the SparkFun ImageCapture and RP2 HSTX ST7789 Arduino Libraries. You can install them through the Library Manager in the Arduino IDE by searching for \"SparkFun ImageCapture\" and \"SparkFun RP2 HSTX ST7789\" and install the latest version. Alternatively, you can download a ZIP of each library to manually install them by clicking the buttons below:</p> <p> SparkFun ImageCapture Arduino Library (ZIP) </p> <p> SparkFun RP2 HSTX ST7789 Arduino Library (ZIP) </p> <p>With the libraries installed, let's move on to uploading the code.</p>"},{"location":"vision_demo_code/#vision-demo-example-code","title":"Vision Demo Example Code","text":"<p>The example code for this demo can be found in the Thing Plus - RP2350 GitHub Repository in the \"Examples/Vision_Demo\" folder. You can find it from the link above or download a ZIP of the entire repository by clicking the button below:</p> <p> Thing Plus - RP2350 GitHub Repo (ZIP) </p> <p>Open up the example in Arduino or open a blank sketch and copy the code below:</p> Vision Demo <pre><code>#include \"SparkFun_iCap_OV5640.h\"\n#include \"SparkFun_RP2_HSTX_ST7789_Arduino_Library.h\"\n\n// Configuration for the display\nRP2_HSTX_ST7789_Config displayConfig = {\n    .pinDin  =   18, // Must support HSTX (GPIO 12-19 on RP2350)\n    .pinSck  =   19, // Must support HSTX (GPIO 12-19 on RP2350)\n    .pinCs   =   16, // Must support HSTX (GPIO 12-19 on RP2350)\n    .pinDc   =   17, // Must support HSTX (GPIO 12-19 on RP2350)\n    .pinRst  =   -1, // Any GPIO pin, or -1 if not connected\n    .pinBl   =   -1, // Any GPIO pin, or -1 if not connected\n    .width   =  320, // Display width\n    .height  =  240, // Display height\n    .rawMode = true, // Whether to use raw mode\n};\n\n// Set up arch and pins structures for Pico RP2040.\niCap_arch arch =\n{\n    .pio = pio0, // Can be pio0, pio1, or pio2 on the RP2350\n    .bswap = false // Whether to swap the camera data bytes\n};\n\n// Pins for the OV5640 camera\nOV5640_pins pins =\n{\n    .enable = -1, // Any GPIO pin, or -1 if not connected\n    .reset  = -1, // Any GPIO pin, or -1 if not connected\n    .xclk   = 11, // Any GPIO pin\n    .pclk   = 26, // Any GPIO pin\n    .vsync  = 27, // Any GPIO pin\n    .hsync  = 28, // Any GPIO pin\n    .data   = {0, 1, 2, 3, 4, 5, 6, 7}, // Any GPIO pins, must be sequential!\n    .sda    = 20, // Any I2C pin pair\n    .scl    = 21  // Any I2C pin pair\n};\n\n// Create an instance of the camera\nSparkFun_iCap_OV5640 cam(pins, &amp;arch, Wire1);\n\n// Create an instance of the display\nRP2_HSTX_ST7789 display;\n\n// Threshold pin\nint thresholdPin = 22;\n\nvoid setup() {\n    Serial.begin(115200);\n    Serial.println(\"Hello! Camera Test.\");\n\n    // Begin camera with QVGA resolution (320x240) and RGB565 color (16-bit)\n    iCap_status status = cam.begin(OV5640_SIZE_QVGA, ICAP_COLOR_RGB565);\n    while(status != ICAP_STATUS_OK)\n    {\n        Serial.println(\"Camera not found, please check wiring!\");\n        delay(1000);\n    }\n\n    // Initialize the display\n    display.begin(displayConfig);\n\n    // Set the threshold pin as an input with pull-up\n    pinMode(thresholdPin, INPUT_PULLUP);\n}\n\nvoid loop()\n{\n    // Record the current time\n    uint32_t t0 = micros();\n\n    // Get the camera buffer\n    uint16_t* buffer = cam.getBuffer();\n\n    // Check whether thresholding is requested\n    bool threshold = digitalRead(thresholdPin) != 0;\n\n    // Send the command to start a new frame\n    display.startNewFrameRaw();\n\n    // Loop through all pixels in the frame buffer\n    for (int y = 0; y &lt; displayConfig.width; ++y)\n    {\n        for (int x = 0; x &lt; displayConfig.height; ++x)\n        {\n            // Get the pixel value from the camera buffer\n            int rgb = buffer[x * displayConfig.width + y];\n\n            // Check whether thresholding is requested\n            if(threshold)\n            {\n                // Extract the red, green, and blue components (RGB565)\n                int r = (rgb &gt;&gt; 11) &amp; 0x1f;\n                int g = (rgb &gt;&gt; 5) &amp; 0x3f;\n                int b = rgb &amp; 0x1f;\n\n                // Calculate the sum of the components. Only use 5 bits of green\n                // to match red and blue\n                int sum = r + (g&gt;&gt;1) + b;\n\n                // With 5 bits per channel, the maximum sum is 96, so we'll use\n                // half of that as the threshold\n                if(sum &gt;= 48)\n                {\n                    // We're above the threshold, so set the pixel to white\n                    rgb = 0xffff;\n                }\n                else\n                {\n                    // We're below the threshold, so set the pixel to black\n                    rgb = 0x0000;\n                }\n            }\n\n            // Send this pixel to the display\n            display.putPixelRaw(rgb);\n        }\n    }\n\n    // Record the current time\n    uint32_t t1 = micros();\n\n    // Print FPS of the display\n    float fps = 1e6 / (t1 - t0);\n    Serial.printf(\"Display FPS: %.2f\\n\", fps);\n}\n</code></pre> <p>Select the board (SparkFun Thing Plus - RP2350) and port and click the \"Upload\" button. Once the code finishes uploading, you should see the screen turn on and start displaying a live feed from the camera. </p> <p></p> <p>If the screen remains black, press the Reset button on the Thing Plus and it should start up after that. If you do not see anything, open the Serial Monitor in Arduino with the baud set to 115200, reset the board again and check to see if the camera connection error message prints. If it does, double check the wiring to make sure everything is connected properly.</p>"},{"location":"assets/board_files/","title":"board_files directory","text":"<ol> <li>A <code>dimensions*.pdf</code> file containing the board's measurements.</li> <li>A <code>schematic.pdf</code> file containing the board's schematics.</li> <li>An <code>eagle_files*.zip</code> folder containing the Eagle CAD schematics (<code>*.sch</code>) and PCB design (<code>*.brd</code>) files.<ul> <li>A freeware version of Autodesk Eagle can be found here. </li> </ul> </li> </ol>"},{"location":"assets/component_documentation/","title":"component_documentation directory","text":"<p>Copies of the datasheets, user manuals, programming guides, etc. of the major electrical components on the board.</p>"},{"location":"assets/img/","title":"img directory","text":"<p>This folder should contain the images for the product documentation</p>"},{"location":"assets/img/#general-images","title":"General Images","text":"<ul> <li><code>sfe_logo_sm.png</code> - SparkFun flame logo (Cover page for with-pdf extension)</li> <li><code>sfe_logo_sq.png</code> - SparkFun flame logo (favicon)</li> </ul>"},{"location":"assets/img/#directory","title":"Directory","text":"<ul> <li><code>qr_code</code> - QR codes for the product documentation</li> </ul>"},{"location":"assets/img/#qr-codes","title":"QR Codes","text":"<ul> <li>QR code generator<ul> <li>Flame Color: #E0311D</li> <li>Frame Color: #3C464D</li> </ul> </li> <li>Remove meta data from svg</li> </ul>"},{"location":"github/","title":"github directory","text":"<p>This folder should contain the instructions for submitting issues and pull requests for this project</p>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Thing Plus - RP2350 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Thing Plus - RP2350 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Thing Plus - RP2350 repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Thing Plus - RP2350 repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"},{"location":"stylesheet/REAMDE/","title":"stylesheet directory","text":"<p>This folder should contain the files used for the webpage customizations of the product documentation</p>"}]}